// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Job {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  title             String
  description       String?
  short_description String?
  imageUrl          String?
  isPublished       Boolean  @default(false)
  tags              String[]
  savedUsers        String[]
  shiftTiming       String?
  hourlyRate        String?
  yearsOfExperience String?
  workMode          String?

  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId String?  @db.ObjectId

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId String?   @db.ObjectId

  attachments Attachment[]
  appliedJobs AppliedJob[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([companyId], name: "job_companyId_idx")
  @@index([categoryId], name: "job_categoryId_idx")

}

model Company {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  name           String
  description    String?
  logo           String?  @default("/default-company-logo.png")
  coverImage     String?
  mail           String?
  website        String?
  linkedIn       String?
  address_line_1 String?
  address_line_2 String?
  city           String?
  state          String?
  zipcode        String?
  jobs           Job[]
  followers      String[]
  overview       String?
  whyJoinUs      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String   @unique
  name      String
  jobId     String?  @db.ObjectId
  job       Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserProfile {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @unique
  fullName       String?
  email          String?
  contact        String?
  appliedJobs    AppliedJob[]
  resumes        Resumes[]
  activeResumeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId], name: "user_profile_userId_idx")
  @@index([email], name: "user_profile_email_idx")
}

model AppliedJob {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  jobId         String      @db.ObjectId
  userProfileId String      @db.ObjectId
  appliedAt     DateTime    @default(now())
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  job           Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Resumes {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @db.String(255)
  url           String   @unique
  userProfileId String      @db.ObjectId
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

 @@index([userProfileId], name: "resumes_userProfileId_idx")
}